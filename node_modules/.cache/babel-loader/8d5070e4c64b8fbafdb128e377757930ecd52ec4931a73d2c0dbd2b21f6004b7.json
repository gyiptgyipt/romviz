{"ast":null,"code":"var _jsxFileName = \"/home/zyme/ros_ws/romviz/romviz/src/components/map.jsx\";\nimport React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n// import Config from \"../script/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor() {\n    super();\n    this.view_map = this.view_map.bind(this);\n  }\n  init_connection() {\n    // Initialize the ROS connection\n    this.ros = new ROSLIB.Ros({\n      url: \"ws://localhost:9090\" // Update this with your ROS 2 WebSocket server URL\n    });\n\n    // Define ROS connection events\n    this.ros.on(\"connection\", () => {\n      console.log(\"Connection to ROS 2 established!\");\n      this.setState({\n        connected: true\n      });\n    });\n    this.ros.on(\"error\", error => {\n      console.error(\"Error connecting to ROS 2:\", error);\n      this.setState({\n        connected: false\n      });\n    });\n    this.ros.on(\"close\", () => {\n      console.log(\"Connection to ROS 2 closed.\");\n      this.setState({\n        connected: false\n      });\n    });\n  }\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      severName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"nav_div\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ROSLIB","jsxDEV","_jsxDEV","Map","constructor","view_map","bind","init_connection","ros","Ros","url","on","console","log","setState","connected","error","componentDidMount","viewer","window","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","state","rootObject","scene","severName","withOrientation","render","id","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/zyme/ros_ws/romviz/romviz/src/components/map.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n// import Config from \"../script/config\";\n\nclass Map extends Component {\n\n\n\n    constructor(){\n      super();\n      this.view_map = this.view_map.bind(this);\n    }\n \n\n\n  init_connection() {\n    // Initialize the ROS connection\n    this.ros = new ROSLIB.Ros({\n        url: \"ws://localhost:9090\", // Update this with your ROS 2 WebSocket server URL\n    });\n\n    // Define ROS connection events\n    this.ros.on(\"connection\", () => {\n        console.log(\"Connection to ROS 2 established!\");\n        this.setState({ connected: true });\n    });\n\n    this.ros.on(\"error\", (error) => {\n        console.error(\"Error connecting to ROS 2:\", error);\n        this.setState({ connected: false });\n    });\n\n    this.ros.on(\"close\", () => {\n        console.log(\"Connection to ROS 2 closed.\");\n        this.setState({ connected: false });\n    });\n}\ncomponentDidMount() {\n  this.init_connection();\n  this.view_map();\n}\n\n  view_map() {\n\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640 ,\n      height: 480 ,\n  \n\n    });\n\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      severName: \"/move_base\",\n      withOrientation: true,\n\n    });\n  }\n\n  render() {\n    return<div id=\"nav_div\"> </div>\n  }\n}\n\n\nexport default Map;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,QAAQ;AAC3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAIxBK,WAAWA,CAAA,EAAE;IACX,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C;EAIFC,eAAeA,CAAA,EAAG;IAChB;IACA,IAAI,CAACC,GAAG,GAAG,IAAIR,MAAM,CAACS,GAAG,CAAC;MACtBC,GAAG,EAAE,qBAAqB,CAAE;IAChC,CAAC,CAAC;;IAEF;IACA,IAAI,CAACF,GAAG,CAACG,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI,CAACC,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,CAACP,GAAG,CAACG,EAAE,CAAC,OAAO,EAAGK,KAAK,IAAK;MAC5BJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,IAAI,CAACF,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;IACvC,CAAC,CAAC;IAEF,IAAI,CAACP,GAAG,CAACG,EAAE,CAAC,OAAO,EAAE,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI,CAACC,QAAQ,CAAC;QAAEC,SAAS,EAAE;MAAM,CAAC,CAAC;IACvC,CAAC,CAAC;EACN;EACAE,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACV,eAAe,CAAC,CAAC;IACtB,IAAI,CAACF,QAAQ,CAAC,CAAC;EACjB;EAEEA,QAAQA,CAAA,EAAG;IAET,IAAIa,MAAM,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC;MACnCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IAGV,CAAC,CAAC;IAEF,IAAIC,SAAS,GAAG,IAAIN,MAAM,CAACO,KAAK,CAACC,sBAAsB,CAAC;MAEtDnB,GAAG,EAAE,IAAI,CAACoB,KAAK,CAACpB,GAAG;MACnBqB,UAAU,EAAEX,MAAM,CAACY,KAAK;MACxBZ,MAAM,EAAEA,MAAM;MACda,SAAS,EAAE,YAAY;MACvBC,eAAe,EAAE;IAEnB,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAAA,EAAG;IACP,oBAAM/B,OAAA;MAAKgC,EAAE,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACjC;AACF;AAGA,eAAepC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}