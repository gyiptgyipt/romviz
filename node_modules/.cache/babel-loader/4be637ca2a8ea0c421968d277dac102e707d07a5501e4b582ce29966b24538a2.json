{"ast":null,"code":"var _jsxFileName = \"/home/zyme/ros_ws/romviz/romviz/src/components/map.jsx\";\nimport React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n// import Config from \"../script/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  // Initialize state\n\n  constructor() {\n    super();\n    this.state = {\n      connected: false\n    };\n    this.ros = null; // Initialize ROS connection instance\n    this.view_map = this.view_map.bind(this);\n  }\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n  init_connection() {\n    // Initialize the ROS connection\n    this.ros = new ROSLIB.Ros({\n      url: \"ws://localhost:9090\" // Update this with your ROS 2 WebSocket server URL\n    });\n\n    // Define ROS connection events\n    this.ros.on(\"connection\", () => {\n      console.log(\"Connection to ROS 2 established in Map!\");\n      if (this._isMounted) {\n        this.setState({\n          connected: true\n        }); // Set state when connection is successful\n      }\n    });\n    this.ros.on(\"error\", error => {\n      console.error(\"Error connecting to ROS 2:\", error);\n      if (this._isMounted) {\n        this.setState({\n          connected: false\n        }); // Set state when connection has an error\n      }\n    });\n    this.ros.on(\"close\", () => {\n      console.log(\"Connection to ROS 2 closed.\");\n      if (this._isMounted) {\n        this.setState({\n          connected: false\n        }); // Set state when connection is closed\n      }\n    });\n  }\n  componentWillUnmount() {\n    this._isMounted = false; // Flag to prevent setState after unmount\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.connected,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      severName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"nav_div\",\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ROSLIB","jsxDEV","_jsxDEV","Map","constructor","state","connected","ros","view_map","bind","componentDidMount","init_connection","Ros","url","on","console","log","_isMounted","setState","error","componentWillUnmount","viewer","window","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","severName","withOrientation","render","id","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/zyme/ros_ws/romviz/romviz/src/components/map.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n// import Config from \"../script/config\";\n\nclass Map extends Component {\n  state = { connected: false }; // Initialize state\n\n  constructor() {\n    super();\n    this.ros = null; // Initialize ROS connection instance\n    this.view_map = this.view_map.bind(this);\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    this.view_map();\n  }\n\n  init_connection() {\n    // Initialize the ROS connection\n    this.ros = new ROSLIB.Ros({\n      url: \"ws://localhost:9090\", // Update this with your ROS 2 WebSocket server URL\n    });\n\n    // Define ROS connection events\n    this.ros.on(\"connection\", () => {\n      console.log(\"Connection to ROS 2 established in Map!\");\n      if (this._isMounted) {\n        this.setState({ connected: true }); // Set state when connection is successful\n      }\n    });\n\n    this.ros.on(\"error\", (error) => {\n      console.error(\"Error connecting to ROS 2:\", error);\n      if (this._isMounted) {\n        this.setState({ connected: false }); // Set state when connection has an error\n      }\n    });\n\n    this.ros.on(\"close\", () => {\n      console.log(\"Connection to ROS 2 closed.\");\n      if (this._isMounted) {\n        this.setState({ connected: false }); // Set state when connection is closed\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false; // Flag to prevent setState after unmount\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.connected,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      severName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return <div id=\"nav_div\"> </div>;\n  }\n}\n\nexport default Map;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,QAAQ;AAC3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,SAASJ,SAAS,CAAC;EACI;;EAE9BK,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KAHVC,KAAK,GAAG;MAAEC,SAAS,EAAE;IAAM,CAAC;IAI1B,IAAI,CAACC,GAAG,GAAG,IAAI,CAAC,CAAC;IACjB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C;EAEAC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,eAAe,CAAC,CAAC;IACtB,IAAI,CAACH,QAAQ,CAAC,CAAC;EACjB;EAEAG,eAAeA,CAAA,EAAG;IAChB;IACA,IAAI,CAACJ,GAAG,GAAG,IAAIP,MAAM,CAACY,GAAG,CAAC;MACxBC,GAAG,EAAE,qBAAqB,CAAE;IAC9B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACN,GAAG,CAACO,EAAE,CAAC,YAAY,EAAE,MAAM;MAC9BC,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACtD,IAAI,IAAI,CAACC,UAAU,EAAE;QACnB,IAAI,CAACC,QAAQ,CAAC;UAAEZ,SAAS,EAAE;QAAK,CAAC,CAAC,CAAC,CAAC;MACtC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,GAAG,CAACO,EAAE,CAAC,OAAO,EAAGK,KAAK,IAAK;MAC9BJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,IAAI,IAAI,CAACF,UAAU,EAAE;QACnB,IAAI,CAACC,QAAQ,CAAC;UAAEZ,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC,CAAC;MACvC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,GAAG,CAACO,EAAE,CAAC,OAAO,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI,IAAI,CAACC,UAAU,EAAE;QACnB,IAAI,CAACC,QAAQ,CAAC;UAAEZ,SAAS,EAAE;QAAM,CAAC,CAAC,CAAC,CAAC;MACvC;IACF,CAAC,CAAC;EACJ;EAEAc,oBAAoBA,CAAA,EAAG;IACrB,IAAI,CAACH,UAAU,GAAG,KAAK,CAAC,CAAC;EAC3B;EAEAT,QAAQA,CAAA,EAAG;IACT,IAAIa,MAAM,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC;MACnCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIC,SAAS,GAAG,IAAIN,MAAM,CAACO,KAAK,CAACC,sBAAsB,CAAC;MACtDvB,GAAG,EAAE,IAAI,CAACF,KAAK,CAACC,SAAS;MACzByB,UAAU,EAAEV,MAAM,CAACW,KAAK;MACxBX,MAAM,EAAEA,MAAM;MACdY,SAAS,EAAE,YAAY;MACvBC,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAAA,EAAG;IACP,oBAAOjC,OAAA;MAAKkC,EAAE,EAAC,SAAS;MAAAC,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClC;AACF;AAEA,eAAetC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}