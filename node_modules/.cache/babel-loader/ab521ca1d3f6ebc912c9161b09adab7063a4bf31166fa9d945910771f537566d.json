{"ast":null,"code":"var _jsxFileName = \"/home/zyme/ros_ws/romviz/romviz/src/components/map.jsx\";\nimport React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      connected: false // Initialize connection state\n    };\n    this.ros = null; // Initialize ROS connection instance\n    this.view_map = this.view_map.bind(this);\n    this._isMounted = false; // Track if the component is mounted\n  }\n  componentDidMount() {\n    this._isMounted = true; // Mark component as mounted\n    this.init_connection(); // Initialize ROS connection\n    this.view_map(); // Set up the map\n  }\n  componentWillUnmount() {\n    this._isMounted = false; // Mark component as unmounted\n    if (this.ros) {\n      this.ros.close(); // Close ROS connection\n    }\n  }\n  init_connection() {\n    // Initialize the ROS connection\n    this.ros = new ROSLIB.Ros({\n      url: \"ws://localhost:9090\" // Update this with your ROS 2 WebSocket server URL\n    });\n\n    // Define ROS connection events\n    this.ros.on(\"connection\", () => {\n      console.log(\"Connection to ROS 2 established!\");\n      if (this._isMounted) {\n        this.setState({\n          connected: true\n        });\n      }\n    });\n    this.ros.on(\"error\", error => {\n      console.error(\"Error connecting to ROS 2:\", error);\n      if (this._isMounted) {\n        this.setState({\n          connected: false\n        });\n      }\n    });\n    this.ros.on(\"close\", () => {\n      console.log(\"Connection to ROS 2 closed.\");\n      if (this._isMounted) {\n        this.setState({\n          connected: false\n        });\n      }\n    });\n  }\n  view_map() {\n    const viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n\n    // new window.NAV2D.OccupancyGridClientNav({\n    //   ros: this.ros,\n    //   rootObject: viewer.scene,\n    //   serverName: \"/move_base\",\n    //   withOrientation: true,\n    // });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"nav_div\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","ROSLIB","jsxDEV","_jsxDEV","Map","constructor","props","state","connected","ros","view_map","bind","_isMounted","componentDidMount","init_connection","componentWillUnmount","close","Ros","url","on","console","log","setState","error","viewer","window","ROS2D","Viewer","divID","width","height","render","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/zyme/ros_ws/romviz/romviz/src/components/map.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport ROSLIB from \"roslib\";\n\nclass Map extends Component {\n  state = {\n    connected: false, // Initialize connection state\n  };\n\n  constructor(props) {\n    super(props);\n    this.ros = null; // Initialize ROS connection instance\n    this.view_map = this.view_map.bind(this);\n    this._isMounted = false; // Track if the component is mounted\n  }\n\n  componentDidMount() {\n    this._isMounted = true; // Mark component as mounted\n    this.init_connection(); // Initialize ROS connection\n    this.view_map(); // Set up the map\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false; // Mark component as unmounted\n    if (this.ros) {\n      this.ros.close(); // Close ROS connection\n    }\n  }\n\n  init_connection() {\n    // Initialize the ROS connection\n    this.ros = new ROSLIB.Ros({\n      url: \"ws://localhost:9090\", // Update this with your ROS 2 WebSocket server URL\n    });\n\n    // Define ROS connection events\n    this.ros.on(\"connection\", () => {\n      console.log(\"Connection to ROS 2 established!\");\n      if (this._isMounted) {\n        this.setState({ connected: true });\n      }\n    });\n\n    this.ros.on(\"error\", (error) => {\n      console.error(\"Error connecting to ROS 2:\", error);\n      if (this._isMounted) {\n        this.setState({ connected: false });\n      }\n    });\n\n    this.ros.on(\"close\", () => {\n      console.log(\"Connection to ROS 2 closed.\");\n      if (this._isMounted) {\n        this.setState({ connected: false });\n      }\n    });\n  }\n\n  view_map() {\n    const viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n\n    // new window.NAV2D.OccupancyGridClientNav({\n    //   ros: this.ros,\n    //   rootObject: viewer.scene,\n    //   serverName: \"/move_base\",\n    //   withOrientation: true,\n    // });\n  }\n\n  render() {\n    return <div id=\"nav_div\"></div>;\n  }\n}\n\nexport default Map;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAK1BK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KALfC,KAAK,GAAG;MACNC,SAAS,EAAE,KAAK,CAAE;IACpB,CAAC;IAIC,IAAI,CAACC,GAAG,GAAG,IAAI,CAAC,CAAC;IACjB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACC,UAAU,GAAG,KAAK,CAAC,CAAC;EAC3B;EAEAC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACD,UAAU,GAAG,IAAI,CAAC,CAAC;IACxB,IAAI,CAACE,eAAe,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnB;EAEAK,oBAAoBA,CAAA,EAAG;IACrB,IAAI,CAACH,UAAU,GAAG,KAAK,CAAC,CAAC;IACzB,IAAI,IAAI,CAACH,GAAG,EAAE;MACZ,IAAI,CAACA,GAAG,CAACO,KAAK,CAAC,CAAC,CAAC,CAAC;IACpB;EACF;EAEAF,eAAeA,CAAA,EAAG;IAChB;IACA,IAAI,CAACL,GAAG,GAAG,IAAIR,MAAM,CAACgB,GAAG,CAAC;MACxBC,GAAG,EAAE,qBAAqB,CAAE;IAC9B,CAAC,CAAC;;IAEF;IACA,IAAI,CAACT,GAAG,CAACU,EAAE,CAAC,YAAY,EAAE,MAAM;MAC9BC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,IAAI,IAAI,CAACT,UAAU,EAAE;QACnB,IAAI,CAACU,QAAQ,CAAC;UAAEd,SAAS,EAAE;QAAK,CAAC,CAAC;MACpC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,GAAG,CAACU,EAAE,CAAC,OAAO,EAAGI,KAAK,IAAK;MAC9BH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,IAAI,IAAI,CAACX,UAAU,EAAE;QACnB,IAAI,CAACU,QAAQ,CAAC;UAAEd,SAAS,EAAE;QAAM,CAAC,CAAC;MACrC;IACF,CAAC,CAAC;IAEF,IAAI,CAACC,GAAG,CAACU,EAAE,CAAC,OAAO,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC1C,IAAI,IAAI,CAACT,UAAU,EAAE;QACnB,IAAI,CAACU,QAAQ,CAAC;UAAEd,SAAS,EAAE;QAAM,CAAC,CAAC;MACrC;IACF,CAAC,CAAC;EACJ;EAEAE,QAAQA,CAAA,EAAG;IACT,MAAMc,MAAM,GAAG,IAAIC,MAAM,CAACC,KAAK,CAACC,MAAM,CAAC;MACrCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACA;EACF;EAEAC,MAAMA,CAAA,EAAG;IACP,oBAAO5B,OAAA;MAAK6B,EAAE,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACjC;AACF;AAEA,eAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}